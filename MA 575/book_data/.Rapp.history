m1 = lm(y~x+z)
m2 = lm(y~x)
anova(m1,m2)
a0 = function(p){#
	return(.75*(p-p^3/3 + 2/3))#
}#
#
a1 = function(p){#
	return(.75*(p^2/2-p^4/4 - 1/4))#
}#
#
a2 = function(p){#
	return(.75*(p^3/3-p^5/5 + 2/15))#
}
a0 = function(p){#
	return(.75*(p-p^3/3 + 2/3))#
}#
#
a1 = function(p){#
	return(.75*(p^2/2-p^4/4 - 1/4))#
}#
#
a2 = function(p){#
	return(.75*(p^3/3-p^5/5 + 2/15))#
}#
#
K = function(t){#
	return(.75*(1-t^2))#
}
a0 = function(p){#
	return(.75*(p-p^3/3 + 2/3))#
}#
#
a1 = function(p){#
	return(.75*(p^2/2-p^4/4 - 1/4))#
}#
#
a2 = function(p){#
	return(.75*(p^3/3-p^5/5 + 2/15))#
}#
#
K = function(t){#
	return(.75*(1-t^2))#
}#
#
I(t,p) = function(t){#
	return(ifelse(t>p, 0,1))#
}
a0 = function(p){#
	return(.75*(p-p^3/3 + 2/3))#
}#
#
a1 = function(p){#
	return(.75*(p^2/2-p^4/4 - 1/4))#
}#
#
a2 = function(p){#
	return(.75*(p^3/3-p^5/5 + 2/15))#
}#
#
K = function(t){#
	return(.75*(1-t^2))#
}#
#
I = function(t,p){#
	return(ifelse(t>p, 0,1))#
}
B = function(t,p){#
	top = a2(p) - a1(p)*t#
	bottom = a2(p)*a0(p) - a1(p)^2#
	x = top/bottom * K(t) * I(t,p)#
}
a0 = function(p){#
	return(.75*(p-p^3/3 + 2/3))#
}#
#
a1 = function(p){#
	return(.75*(p^2/2-p^4/4 - 1/4))#
}#
#
a2 = function(p){#
	return(.75*(p^3/3-p^5/5 + 2/15))#
}#
#
K = function(t){#
	return(.75*(1-t^2))#
}#
#
I = function(t,p){#
	return(ifelse(t>p, 0,1))#
}#
#
B = function(t,p){#
	top = a2(p) - a1(p)*t#
	bottom = a2(p)*a0(p) - a1(p)^2#
	ret = top/bottom * K(t) * I(t,p)#
	return(ret)#
}#
#
p = .25#
x = seq(-1, p, by = .01)#
y = B(x,p)#
plot(x,y, type = "l")
p = .5#
x = seq(-1, p, by = .01)#
y = B(x,p)#
plot(x,y, type = "l")
p = .75#
x = seq(-1, p, by = .01)#
y = B(x,p)#
plot(x,y, type = "l")
plot(x, y[[1]], type = "l", col = "red")
x = seq(-1, p, by = .01)#
y = list()#
P = c(.25, .5, .75)#
for(i in 1:3){#
	p = P[i]#
	y[[i]] = B(x, p)#
}#
plot(x, y[[1]], type = "l", col = "red")
x = seq(-1, 1, by = .01)#
y = list()#
P = c(.25, .5, .75)#
for(i in 1:3){#
	p = P[i]#
	y[[i]] = B(x, p)#
}#
plot(x, y[[1]], type = "l", col = "red")#
points(x, y[[1]], type = "l", col = "green")#
points(x, y[[1]], type = "l", col = "blue")
plot(x, y[[1]], type = "l", col = "red")#
points(x, y[[2]], type = "l", col = "green")#
points(x, y[[3]], type = "l", col = "blue")
iris
pl = iris$petal.length
hist(pl)
pl
pl = iris$Petal.length
pl
pl = iris$Petal.Length
hist(pl)
integrate(1-t^2, -1, 1)
integrate(1-x^2, -1, 1)
integrate(exp(1-x^2), -1, 1)
integrate(exp(1-t^2), -1, 1)
?integrate
K = function(t){#
	return(0.75 *(1-t^2))#
}
integrate(K, -1, 1)
K = function(t){#
	return(0.75 *(1-t^2))#
}#
#
Kappa = function(upper){#
	return(integrate(K, -1, upper))#
}
pl = iris$Petal.Length
Kappa(c(1,2))
pl = iris$Petal.Length#
#
K = function(t){#
	return(0.75 *(1-t^2))#
}#
#
Kappa = function(upper){#
	return(integrate(K, -1, upper))#
}#
#
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(x)#
	}#
	return(y)#
}
CDF(0)
CDF(0, .1)
warnings()
Kappa(1)
names(Kappa(1))
Kappa = function(upper){#
	return(integrate(K, -1, upper)$value)#
}
Kappa(1)
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(x)#
	}#
	return(y)#
}
CDF(0, .1)
pl
x - pl
x = 0
x = pl
x = 0
x-pl
Kappa(-1.4)
?integrate
Kappa = function(upper){#
	return(integrate(K, lower = -1, upper)$value)#
}
Kappa(-1.4)
I = function(x){#
	return(ifelse(X> 1 || X<-1), 0, 1)#
}
I(-1)
I = function(x){#
	return(ifelse(X> 1 || X<-1, 0, 1)#
}
I = function(x){#
	return(ifelse(X> 1 || X<-1, 0, 1))#
}
I(0)
I = function(x){#
	return(ifelse(x> 1 || x<-1, 0, 1))#
}
I(0)
I = function(x){#
	return(ifelse(x> 1 || x< -1, 0, 1))#
}
I(0)
I(1)
I(-2)
I(-3)
I(-.245)
I = function(x){#
	return(ifelse(x> 1 || x< -1, 0, 1))#
}#
#
K = function(t){#
	return(0.75 *(1-t^2)*I(t))#
}
Kappa = function(upper){#
	return(integrate(K, lower = -1, upper)$value)#
}
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(x)#
	}#
	return(y)#
}
x
x - pl
CDF(0, .1)
Kappa(/2)
Kappa(-2)
Kappa(-6)
(x - pl)/.1
Kappa(-48)
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg)#
	}#
	return(y)#
}
CDF(0)
CDF(0, .1)
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg[i])#
	}#
	return(y)#
}
CDF(0, .1)
hist(pl)
CDF(4, .1)
hist(pl)
CDF(10, .1)
CDF(10, 10)
CDF(4, .1)
CDF(4, 10)
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg[i])#
	}#
	return(mean(y))#
}
str(pl)
summary(pl)
x = seq(1, 7, by = .1)#
F = numeric(length(x))#
for(i in 1:length(x)){#
	F[i] = CDF(x[i], .5)#
}#
#
plot(x, F, type = "l")
CDF(-1, .1)
plot(x, F, type = "l")
CDF(3, .1)
CDF(2, .1)
CDF(2,x .1)
s
x
CDF(x[18], .5)
x[18]
CDF(2.7, .5)
2.7 - pl
(2.7 - pl)/(0.5)
arg = (2.7 - pl)/(0.5)
arg
Kappa(2.6)
curve(.75*(1-x^2))
curve(.75*(1-x^2), from = -1, to = 1)
curve(K, from = -1, to = 1)
integrate(K, -1, -2)
integrate(K, -1, 2.6)
K = function(t){#
	if(I(t) == 0){#
		return(0)#
	}else{#
		return(0.75 *(1-t^2))#
	}#
}
x
z = seq(-10, 10, by = .1)
plot(z, K(z))
K = function(t){#
	if(I(t) == 0){#
		return(0)#
	}else{#
		return(0.75 *(1-t^2))#
	}#
}
Kappa = function(upper){#
	return(integrate(K, lower = -1, upper)$value)#
}
Kappa(2.6)
integrate(K, -1, 2.6)
K
z
zy = numeric(length(z))
for(i in 1:length(z)){
zy[i] = K(z[i])}
zy
plot(z, zy)
plot(z, zy, type = "l")
z
z[95]
z[97]
z[100]
z[101]
zy[101]
Kappa = function(upper){#
	x = seq(-1, upper, by = 0.01)#
	dx = 0.01#
	y = numeric(length(x))#
	for(i in 1:length(x)){#
		y[i] = K(x)#
	}#
	return(y*dx)#
}
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg[i])#
	}#
	return(mean(y))#
}#
#
x = seq(1, 7, by = .1)#
F = numeric(length(x))#
for(i in 1:length(x)){#
	F[i] = CDF(x[i], .5)#
}#
#
plot(x, F, type = "l")
Kappa(-1)
Kappa(-2)
Kappa = function(upper){#
	if(upper <-1){#
		return(0)#
	}#
	if(upper >1){#
		return(1)#
	}#
	x = seq(-1, upper, by = 0.01)#
	dx = 0.01#
	y = numeric(length(x))#
	for(i in 1:length(x)){#
		y[i] = K(x)#
	}#
	return(y*dx)#
}
Kappa(2)
Kappa = function(upper){#
	if(upper < -1){#
		return(0)#
	}#
	if(upper > 1){#
		return(1)#
	}#
	x = seq(-1, upper, by = 0.01)#
	dx = 0.01#
	y = numeric(length(x))#
	for(i in 1:length(x)){#
		y[i] = K(x)#
	}#
	return(y*dx)#
}
Kappa(2)
Kappa(-2)
Kappa(-.2)
warnings()
K(-.2)
K(.1)
K(c(.1,2))
y = K(x)
y
Kappa = function(upper){#
	if(upper < -1){#
		return(0)#
	}#
	if(upper > 1){#
		return(1)#
	}#
	x = seq(-1, upper, by = 0.01)#
	dx = 0.01#
	y = K(x)#
	return(y*dx)#
}#
#
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg[i])#
	}#
	return(mean(y))#
}
CDF(0)
CDF(0,.1)
CDF(2,.1)
CDF(6,.1)
x
rm(list =ls())
pl = iris$Petal.Length#
#
I = function(x){#
	return(ifelse(x> 1 || x< -1, 0, 1))#
}#
#
K = function(t){#
	if(I(t) == 0){#
		return(0)#
	}else{#
		return(0.75 *(1-t^2))#
	}#
}#
#
Kappa = function(upper){#
	if(upper < -1){#
		return(0)#
	}#
	if(upper > 1){#
		return(1)#
	}#
	x = seq(-1, upper, by = 0.01)#
	dx = 0.01#
	y = K(x)#
	return(y*dx)#
}#
#
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg[i])#
	}#
	return(mean(y))#
}
CDF(2, .1)
(x - pl)/(.1)
(.2 - pl)/(.1)
(2 - pl)/(.1)
Kappa = function(upper){#
	if(upper < -1){#
		return(0)#
	}#
	if(upper > 1){#
		return(1)#
	}#
	x = seq(-1, upper, by = 0.01)#
	dx = 0.01#
	y = K(x)#
	return(sum(y*dx))#
}
CDF = function(x,h){#
	arg = (x - pl)/h#
	y = numeric(length(arg))#
	for(i in 1:length(arg)){#
		y[i] = Kappa(arg[i])#
	}#
	return(mean(y))#
}
CDF(2,.1)
CDF(1,.1)
CDF(3,.1)
CDF(4,.1)
CDF(5,.1)
CDF(6,.1)
CDF(7,.1)
CDF(9,.1)
x = seq(1, 7, by = .1)#
F = numeric(length(x))#
for(i in 1:length(x)){#
	F[i] = CDF(x[i], .5)#
}
plot(x, F, type = "l")
hist(pl)
plot(x, F, type = "l")
x = seq(1, 7, by = .1)#
Y = list()#
for(j in c(.1,.25,.5)){#
	F = numeric(length(x))#
	for(i in 1:length(x)){#
		F[i] = CDF(x[i], .5)#
	}#
	Y[[j]] = F#
}
x = seq(1, 7, by = .1)#
Y = list()#
H = c(.1,.25,.5)#
for(j in 1:legth(H)){#
	F = numeric(length(x))#
	for(i in 1:length(x)){#
		F[i] = CDF(x[i], H[j])#
	}#
	Y[[j]] = F#
}
x = seq(1, 7, by = .1)#
Y = list()#
H = c(.1,.25,.5)#
for(j in 1:length(H)){#
	F = numeric(length(x))#
	for(i in 1:length(x)){#
		F[i] = CDF(x[i], H[j])#
	}#
	Y[[j]] = F#
}
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2)#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3)#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4)
x = seq(1, 7, by = .1)#
Y = list()#
H = c(.25,.5,.75)#
for(j in 1:length(H)){#
	F = numeric(length(x))#
	for(i in 1:length(x)){#
		F[i] = CDF(x[i], H[j])#
	}#
	Y[[j]] = F#
}#
#
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2)#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3)#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4)
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4, col = "blue")
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4, col = "blue")
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n(x)")
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4, col = "blue")
legend(topleft, c(".25", ".5", ".75"))
?legend
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4, col = "blue")#
#
legend(x = topleft, legend = c(".25", ".5", ".75"))
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4, col = "blue")#
#
legend("topleft", legend = c(".25", ".5", ".75"))
legend("topleft", legend = c(".25", ".5", ".75"), lty = c(2,3,4))
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 3,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 4, col = "blue")#
#
legend("topleft", legend = c(".25", ".5", ".75"), lty = c(2,3,4))
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 5,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 10, col = "blue")
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 5,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 10, col = "blue")
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 10, col = "blue")
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 5,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 10, col = "blue")
legend("topleft", legend = c(".25", ".5", ".75"), lty = c(2,5,10))
3 <pl
sum(3 <pl)
sum(3 <pl)/length(pl)
histCDF = function(x){#
	return(sum(x<pl)/length(pl))#
}
histY = numeric(x)#
for(i in 1:length(x)){#
	histY[i] = histCDF(x[i])#
}
histY = numeric(x)
histY = numeric(length(x))
for(i in 1:length(x)){#
	histY[i] = histCDF(x[i])#
}
plot(x, histY)
histCDF = function(x){#
	return(sum(x>pl)/length(pl))#
}#
#
histY = numeric(length(x))#
for(i in 1:length(x)){#
	histY[i] = histCDF(x[i])#
}
plot(x, histY)
plot(x, histY, type = "l")
plot(x, histY, type = "l", ylab = "F_hist(x)",main = "CDF Constant Estimator")
H = c(.1,.25,.5)#
for(j in 1:length(H)){#
	F = numeric(length(x))#
	for(i in 1:length(x)){#
		F[i] = CDF(x[i], H[j])#
	}#
	Y[[j]] = F#
}#
#
plot(x, Y[[1]], type = "l", main = "Epanechnikov Kernel CDF", lty = 2, col = "red", ylab = "F_n	(x)")#
points(x, Y[[2]], type = "l", main = "Epanechnikov Kernel CDF", lty = 5,col = "green")#
points(x, Y[[3]], type = "l", main = "Epanechnikov Kernel CDF", lty = 10, col = "blue")#
#
legend("topleft", legend = c(".25", ".5", ".75"), lty = c(2,5,10))
hist(p)
hist(pl)
plot(pl, iris$Petal.Width)
setwd("~/Desktop/Courses/MA 575/book_data")
dat = read.table("confood2.txt")
head(dat)
dat = read.table("confood2.txt", header = T)
head(dat)
instal.packages("nlme")
install.packages("nlme")
library("nlme")
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML")
dat = read.table("~/Desktop/Courses/MA 575/book_data/boxoffice.txt", header = TRUE)
dat$YearsS1975 = dat$year - 1975
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML")
modelgls
summary(modelgls)
dat
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~YearsS1975, data = dat, method = "ML", corAR1)
ata
data
dat
modelgls = gls(GrossBoxOffice ~ YearsS1975, data = dat, method = "ML", corAR1)
modelgls = gls(GrossBoxOffice ~ YearsS1975, data = dat, method = "ML")
modelgls = gls(GrossBoxOffice ~ YearsS1975, data = dat, method = "ML", corStruc(, corAR1))
modelgls = gls(GrossBoxOffice ~ YearsS1975, data = dat, method = "ML", corStruc(corAR1))
modelgls = gls(GrossBoxOffice ~ YearsS1975, data = dat, method = "ML", correlation = corAR1)
modelgls = gls(GrossBoxOffice ~ YearsS1975, data = dat, method = "ML", correlation = corAR1())
summary(modelgls)
summary(modelgls)
#define a_m funcitons #
a0 = function(p){#
	return(.75*(p-p^3/3 + 2/3))#
}#
#
a1 = function(p){#
	return(.75*(p^2/2-p^4/4 - 1/4))#
}#
#
a2 = function(p){#
	return(.75*(p^3/3-p^5/5 + 2/15))#
}#
#
#define Epanechnikov Kernel#
K = function(t){#
	return(.75*(1-t^2))#
}#
#
#Define indicator function#
I = function(t,p){#
	return(ifelse(t>p, 0,1))#
}#
#
#define Boundary kernel #
B = function(t,p){#
	top = a2(p) - a1(p)*t#
	bottom = a2(p)*a0(p) - a1(p)^2#
	ret = top/bottom * K(t) * I(t,p)#
	return(ret)#
}#
#
#plot boundary kernel#
x = seq(-1, 1, by = .01)#
y = list()#
P = c(.25, .5, .75)#
for(i in 1:3){#
	p = P[i]#
	y[[i]] = B(x, p)#
}#
plot(x, y[[1]], type = "l", col = "red")#
points(x, y[[2]], type = "l", col = "green")#
points(x, y[[3]], type = "l", col = "blue")
plot(x, y[[1]], type = "l", lty = 1)#
points(x, y[[2]], type = "l", lty = 2)#
points(x, y[[3]], type = "l",  lty = 3)#
#
legend("topleft", legend = c("p = .25", "p=.5", "p=.75"), lty = c(1,2,3))
plot(x, y[[1]], type = "l", lty = 1, ylab = "B(x)")#
points(x, y[[2]], type = "l", lty = 2)#
points(x, y[[3]], type = "l",  lty = 3)#
#
legend("topleft", legend = c("p = .25", "p=.5", "p=.75"), lty = c(1,2,3))
